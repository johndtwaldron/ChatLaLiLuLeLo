name: Lightning Network E2E Tests

on:
  push:
    branches: [main, develop, develop-v4]
    paths:
      - 'apps/mobile/src/components/ui/LightningQR.tsx'
      - 'apps/mobile/src/lib/lightning.ts'
      - 'apps/mobile/src/lib/bitcoin.ts'
      - 'apps/mobile/src/config/lightning.ts'
      - 'tests/e2e-web/lightning-*.spec.ts'
      - 'tests/e2e-web/lightning*.ts'
      - 'scripts/test-lightning-e2e.js'
      - '.github/workflows/lightning-e2e.yml'

  pull_request:
    branches: [main, develop, develop-v4]
    paths:
      - 'apps/mobile/src/components/ui/LightningQR.tsx'
      - 'apps/mobile/src/lib/lightning.ts'
      - 'apps/mobile/src/lib/bitcoin.ts'
      - 'apps/mobile/src/config/lightning.ts'
      - 'tests/e2e-web/lightning-*.spec.ts'
      - 'tests/e2e-web/lightning*.ts'
      - 'scripts/test-lightning-e2e.js'

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to test'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit
      headed:
        description: 'Run tests in headed mode'
        required: false
        default: false
        type: boolean

env:
  CI: true
  NODE_ENV: test
  LIGHTNING_E2E_MODE: true

jobs:
  lightning-e2e:
    name: Lightning E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: üì¶ Install root dependencies
        run: npm ci

      - name: üì¶ Install mobile app dependencies
        run: |
          cd apps/mobile
          npm ci

      - name: üì¶ Install Edge API dependencies
        run: |
          cd apps/edge
          npm ci

      - name: üé≠ Install Playwright browsers
        run: |
          npx playwright install ${{ matrix.browser }} --with-deps
          npx playwright install-deps ${{ matrix.browser }}

      - name: üîß Validate Lightning configuration
        run: |
          # Check Lightning configuration files exist
          test -f apps/mobile/src/config/lightning.ts
          test -f apps/mobile/src/lib/lightning.ts
          test -f apps/mobile/src/lib/bitcoin.ts
          
          # Validate Lightning test utilities
          node -e "
            const { validateLightningAddress, generateQRData } = require('./tests/utils/lightning-test-utils');
            console.log('Lightning utilities loaded successfully');
            
            // Test address validation
            const validAddress = 'johndtwaldron@strike.me';
            if (!validateLightningAddress(validAddress)) {
              throw new Error('Lightning address validation failed');
            }
            
            // Test QR generation
            const qrData = generateQRData(validAddress);
            if (!qrData.includes(validAddress)) {
              throw new Error('QR data generation failed');
            }
            
            console.log('‚úÖ Lightning configuration validated');
          "

      - name: üöÄ Start development servers
        run: |
          # Start mobile app in background
          cd apps/mobile
          npm run start:web &
          MOBILE_PID=$!
          echo "MOBILE_PID=$MOBILE_PID" >> $GITHUB_ENV
          
          # Wait for servers to be ready
          timeout 120 bash -c 'until curl -f http://localhost:14085 >/dev/null 2>&1; do sleep 2; done'
          echo "‚úÖ Development server ready"

      - name: üß™ Run Lightning E2E tests
        run: |
          # Override browser selection if specified in workflow dispatch
          BROWSER="${{ github.event.inputs.browser || matrix.browser }}"
          HEADED_FLAG=""
          
          if [ "${{ github.event.inputs.headed }}" = "true" ]; then
            HEADED_FLAG="--headed"
          fi
          
          node scripts/test-lightning-e2e.js \
            --browser "$BROWSER" \
            --workers 1 \
            --retries 2 \
            --timeout 300000 \
            $HEADED_FLAG

      - name: üìä Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lightning-e2e-results-${{ matrix.browser }}
          path: |
            tests/e2e-web/reports/lightning/
            tests/e2e-web/test-results/lightning/
          retention-days: 7

      - name: üìÑ Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lightning-playwright-report-${{ matrix.browser }}
          path: tests/e2e-web/reports/lightning/
          retention-days: 7

      - name: üñºÔ∏è Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: lightning-screenshots-${{ matrix.browser }}
          path: tests/e2e-web/test-results/lightning/
          retention-days: 3

      - name: üé• Upload videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: lightning-videos-${{ matrix.browser }}
          path: tests/e2e-web/test-results/lightning/
          retention-days: 3

      - name: üßπ Cleanup
        if: always()
        run: |
          # Kill development servers
          if [ -n "$MOBILE_PID" ]; then
            kill $MOBILE_PID || true
          fi
          
          # Kill any remaining Node processes
          pkill -f "expo start" || true
          pkill -f "webpack" || true

  # Aggregate results and create summary
  lightning-e2e-summary:
    name: Lightning E2E Summary
    runs-on: ubuntu-latest
    needs: [lightning-e2e]
    if: always()
    
    steps:
      - name: üìä Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: lightning-e2e-results-*
          merge-multiple: true
          path: ./test-results

      - name: üìà Generate test summary
        run: |
          echo "# Lightning Network E2E Test Results üî∏" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.lightning-e2e.result }}" = "success" ]; then
            echo "‚úÖ **Status**: All Lightning E2E tests passed!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üéØ **Test Coverage**:" >> $GITHUB_STEP_SUMMARY
            echo "- Bitcoin mode switching ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- Lightning QR code rendering ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- Address copy functionality ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- Visual regression testing ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- Accessibility validation ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- Cross-browser compatibility ‚úÖ" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Status**: Some Lightning E2E tests failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üîç Check the individual job logs and uploaded artifacts for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä **Test Matrix**: Chromium, Firefox, WebKit" >> $GITHUB_STEP_SUMMARY
          echo "‚ö° **Lightning Address**: johndtwaldron@strike.me" >> $GITHUB_STEP_SUMMARY
          echo "üîß **Test Environment**: Ubuntu Latest, Node.js 18" >> $GITHUB_STEP_SUMMARY

      - name: ‚ö° Set status check
        if: always()
        run: |
          if [ "${{ needs.lightning-e2e.result }}" = "success" ]; then
            echo "Lightning E2E tests completed successfully! ‚úÖ"
            exit 0
          else
            echo "Lightning E2E tests encountered failures! ‚ùå"
            exit 1
          fi
