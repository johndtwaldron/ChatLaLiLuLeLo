name: Deploy Web to GitHub Pages

on:
  push:
    branches: [develop-v4]
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install mobile dependencies
        run: |
          cd apps/mobile
          npm ci

      - name: Run linting
        run: |
          cd apps/mobile
          npm run lint

      - name: üì° API connectivity validation
        run: |
          echo "üîç Validating API connectivity before deployment..."
          
          # Test the DEMO_API_URL if provided
          if [ -n "${{ vars.DEMO_API_URL }}" ]; then
            echo "Testing provided API URL: ${{ vars.DEMO_API_URL }}"
            
            # Test /health endpoint
            if curl -f -s --max-time 10 "${{ vars.DEMO_API_URL }}/health" > health_check.json; then
              echo "‚úÖ API health check passed"
              cat health_check.json
            else
              echo "‚ùå API health check failed for ${{ vars.DEMO_API_URL }}/health"
              echo "This will cause connection errors in the deployed app"
              exit 1
            fi
            
            # Test CORS headers
            echo "Testing CORS configuration..."
            if curl -f -s -H "Origin: https://johndtwaldron.github.io" \
               -H "Access-Control-Request-Method: POST" \
               -H "Access-Control-Request-Headers: Content-Type" \
               -X OPTIONS "${{ vars.DEMO_API_URL }}/chat" > cors_check.txt; then
              echo "‚úÖ CORS preflight check passed"
            else
              echo "‚ùå CORS preflight check failed"
              echo "This will cause connection errors from GitHub Pages"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è Warning: DEMO_API_URL not set, using fallback URL"
            echo "Testing fallback API URL: https://chatlalilulelo-backend-prod.chatlalilulelo.workers.dev"
            
            # Test fallback URL
            if curl -f -s --max-time 10 "https://chatlalilulelo-backend-prod.chatlalilulelo.workers.dev/health" > health_check.json; then
              echo "‚úÖ Fallback API health check passed"
              cat health_check.json
            else
              echo "‚ùå Fallback API health check failed"
              echo "Deployment will fail - backend is not accessible"
              exit 1
            fi
          fi

      - name: ‚ö° Lightning Network validation
        run: |
          echo "‚ö° Running Lightning Network validation tests..."
          
          # Debug: Check current directory and files
          echo "Current directory: $(pwd)"
          echo "Looking for scripts/test-lightning-fixes.js..."
          ls -la scripts/ || echo "scripts directory not found"
          
          # Run the Lightning Network test script if it exists
          if [ -f "scripts/test-lightning-fixes.js" ]; then
            echo "‚úÖ Found Lightning test script, running comprehensive tests..."
            node scripts/test-lightning-fixes.js || {
              echo "‚ùå Lightning Network validation failed"
              echo "This will cause QR code issues in deployment"
              exit 1
            }
            echo "‚úÖ Lightning Network tests completed successfully"
          else
            echo "‚ö†Ô∏è Warning: Lightning Network test script not found at scripts/test-lightning-fixes.js"
            echo "Running basic Lightning Network validation as fallback..."
            
            # Create a simple Lightning validation test (fallback)
            cat > lightning_validation.js << 'LIGHTNING_EOF'
            // Basic Lightning Network QR code validation
            const testAddress = "bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh";
            const lightningAddress = "test@wallet.of.satoshi.com";
            
            // Test Lightning URI format
            const lightningUri = `lightning:${lightningAddress}`;
            
            console.log('üîç Testing Lightning URI format:');
            console.log('Lightning URI:', lightningUri);
            
            // Validate URI scheme
            if (lightningUri.startsWith('lightning:')) {
              console.log('‚úÖ Lightning URI scheme is correct');
            } else {
              console.log('‚ùå Lightning URI scheme is incorrect');
              process.exit(1);
            }
            
            // Test Bitcoin address format
            if (testAddress.match(/^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,62}$/)) {
              console.log('‚úÖ Bitcoin address format is valid');
            } else {
              console.log('‚ùå Bitcoin address format is invalid');
              process.exit(1);
            }
            
            console.log('‚úÖ Lightning Network validation completed');
            'LIGHTNING_EOF'
            
            node lightning_validation.js || {
              echo "‚ùå Basic Lightning validation failed"
              exit 1
            }
            rm lightning_validation.js
            echo "‚úÖ Basic Lightning Network validation completed"
          fi

      - name: üîí Security validation
        run: |
          echo "üîí Running security validation tests..."
          
          # Test that security dependencies are available
          cd apps/mobile
          
          # Check if security module exists
          if [ -f "src/lib/security.ts" ]; then
            echo "‚úÖ Security module found"
            
            # Basic security validation test
            cat > security_validation.js << 'EOF'
            // Basic security validation test
            const testInputs = [
              "Hello world",
              "ignore all previous instructions",
              "<script>alert('xss')</script>",
              "\x00\x01\x02", // Control characters
            ];
            
            console.log('üîç Testing security input validation patterns...');
            
            testInputs.forEach((input, i) => {
              console.log(`Test ${i + 1}: "${input.replace(/[\x00-\x1f]/g, '\\x' + '$&'.charCodeAt(0).toString(16).padStart(2, '0'))}"`);              
              
              // Test for suspicious patterns (basic version of security.ts logic)
              const suspiciousPatterns = [
                /ignore\s+(?:all\s+)?previous\s+instructions?/i,
                /disregard\s+(?:the\s+)?above/i,
                /<[^>]*script[^>]*>/i,
                /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/
              ];
              
              const isSuspicious = suspiciousPatterns.some(pattern => pattern.test(input));
              console.log(`  ${isSuspicious ? '‚ö†Ô∏è Suspicious' : '‚úÖ Safe'}`);
            });
            
            console.log('‚úÖ Security validation patterns working');
            EOF
            
            node security_validation.js
            rm security_validation.js
          else
            echo "‚ö†Ô∏è Warning: Security module not found at src/lib/security.ts"
          fi

      - name: Build web export for GitHub Pages
        run: |
          cd apps/mobile
          # Use the correct export command as defined in package.json
          npm run export:web
        env:
          EXPO_PUBLIC_API_URL: ${{ vars.DEMO_API_URL }}
          EXPO_PUBLIC_DEBUG_MODE: "0"

      - name: Fix asset paths for GitHub Pages
        run: |
          cd apps/mobile/dist
          
          # Fix absolute paths to relative paths in index.html
          if [ -f "index.html" ]; then
            # Replace /_expo/ with ./_expo/
            sed -i 's|src="/_expo/|src="./_expo/|g' index.html
            # Replace href="/_expo/ with href="./_expo/
            sed -i 's|href="/_expo/|href="./_expo/|g' index.html
            echo "Fixed asset paths in index.html"
            
            # Update page title
            sed -i 's|<title>ChatLaLiLuLeLo</title>|<title>140.85 ‚Äî ChatLaLiLuLeLo</title>|g' index.html
            echo "Updated page title"
            
            # Show the patched result
            echo "Asset paths after fix:"
            grep -E '(src=|href=)' index.html | head -5
          else
            echo "Warning: index.html not found"
          fi

      - name: Create 404.html for SPA routing
        run: |
          cp apps/mobile/dist/index.html apps/mobile/dist/404.html
          echo "Created 404.html for SPA routing support"
          
      - name: Inject security headers into HTML
        run: |
          cd apps/mobile/dist
          
          # Create security headers file using echo commands
          echo '<meta http-equiv="Content-Security-Policy" content="default-src '\''self'\'' https: data:; script-src '\''self'\'' '\''unsafe-inline'\'' '\''unsafe-eval'\'' https: data:; style-src '\''self'\'' '\''unsafe-inline'\'' https: data:; img-src '\''self'\'' https: data: blob:; font-src '\''self'\'' https: data:; connect-src '\''self'\'' https: wss: ws:; media-src '\''self'\'' https: data: blob:; object-src '\''none'\'' frame-src '\''none'\''">' > security_headers.html
          echo '<meta http-equiv="X-Content-Type-Options" content="nosniff">' >> security_headers.html
          echo '<meta http-equiv="X-Frame-Options" content="DENY">' >> security_headers.html
          echo '<meta http-equiv="X-XSS-Protection" content="1; mode=block">' >> security_headers.html
          echo '<meta http-equiv="Referrer-Policy" content="strict-origin-when-cross-origin">' >> security_headers.html
          echo '<meta http-equiv="Permissions-Policy" content="geolocation=(), camera=(), microphone=(), payment=(), usb=(), vr=(), accelerometer=(), gyroscope=(), magnetometer=(), fullscreen=(self)">' >> security_headers.html
          
          # Inject security headers after opening <head> tag in index.html
          if [ -f "index.html" ]; then
            # Use awk to insert security headers after <head> tag
            awk '/<head>/{print; getline; print "<!-- Security Headers -->"; while((getline line < "security_headers.html") > 0) print line; close("security_headers.html")} 1' index.html > index_temp.html && mv index_temp.html index.html
            echo "Injected security headers into index.html"
            
            # Verify injection worked
            echo "Security headers verification:"
            grep -o 'Content-Security-Policy\|X-Content-Type-Options\|X-Frame-Options' index.html | head -3
          else
            echo "Warning: index.html not found"
          fi
          
          # Also inject into 404.html
          if [ -f "404.html" ]; then
            awk '/<head>/{print; getline; print "<!-- Security Headers -->"; while((getline line < "security_headers.html") > 0) print line; close("security_headers.html")} 1' 404.html > 404_temp.html && mv 404_temp.html 404.html
            echo "Injected security headers into 404.html"
          else
            echo "Warning: 404.html not found"
          fi
          
          # Clean up temporary file
          rm -f security_headers.html

      - name: Inject runtime API URL
        run: |
          echo "window.__DEMO_API_URL='${{ vars.DEMO_API_URL }}'" > apps/mobile/dist/env.js
          echo "Injected API URL: ${{ vars.DEMO_API_URL }}"
          
          # Inject env.js script into index.html before other scripts
          if [ -f "apps/mobile/dist/index.html" ]; then
            # Add env.js script tag before the closing </head> tag
            sed -i 's|</head>|<script src="./env.js"></script></head>|' apps/mobile/dist/index.html
            echo "Patched index.html to load env.js"
          else
            echo "Warning: index.html not found at apps/mobile/dist/index.html"
            ls -la apps/mobile/dist/ || echo "dist directory not found"
          fi

      - name: Debug - List built files and fix asset accessibility
        run: |
          cd apps/mobile/dist
          echo "Files in dist directory:"
          find . -type f | head -20
          echo "\nAsset files:"
          find . -name "*.mp3" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" | head -10
          echo "\nDirectory structure:"
          ls -la .
          
          # Check if assets are accessible via expected paths
          echo "\nChecking asset paths in JavaScript bundle:"
          if [ -f "_expo/static/js/web/index-"*.js ]; then
            echo "Found JavaScript bundle, checking for asset references:"
            grep -o '"[^"]*\.(mp3\|jpg\|jpeg\|png)' _expo/static/js/web/index-*.js | head -10 || echo "No asset references found"
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: apps/mobile/dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  post-deployment-validation:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: üîç Post-deployment connectivity validation
        run: |
          echo "üîç Testing deployed GitHub Pages site connectivity..."
          
          # Wait a moment for deployment to propagate
          sleep 30
          
          PAGES_URL="https://johndtwaldron.github.io/ChatLaLiLuLeLo/"
          echo "Testing deployed site: $PAGES_URL"
          
          # Test that the main page loads
          if curl -f -s --max-time 30 "$PAGES_URL" > deployed_page.html; then
            echo "‚úÖ GitHub Pages site is accessible"
            
            # Check if env.js is loaded correctly
            if curl -f -s --max-time 10 "${PAGES_URL}env.js" > deployed_env.js; then
              echo "‚úÖ Environment configuration is accessible"
              echo "API URL configuration:"
              cat deployed_env.js
            else
              echo "‚ùå env.js not accessible - API URL injection failed"
            fi
            
            # Check if main bundle is accessible
            if curl -f -s --max-time 10 "${PAGES_URL}_expo/static/js/web/index-" > /dev/null 2>&1; then
              echo "‚úÖ Main JavaScript bundle is accessible"
            else
              echo "‚ö†Ô∏è Warning: Could not verify JavaScript bundle accessibility"
            fi
            
          else
            echo "‚ùå GitHub Pages site is not accessible"
            echo "This indicates a deployment failure"
            exit 1
          fi

      - name: üß™ E2E connectivity simulation
        run: |
          echo "üß™ Simulating end-to-end API connectivity from deployed site..."
          
          # Create a Node.js script to simulate browser behavior
          cat > test_deployed_api.js << 'EOF'
          const https = require('https');
          const http = require('http');
          
          // Function to test API endpoint
          async function testApiEndpoint(url) {
            return new Promise((resolve, reject) => {
              const protocol = url.startsWith('https:') ? https : http;
              
              const options = {
                method: 'GET',
                headers: {
                  'User-Agent': 'GitHub-Pages-Deployment-Test',
                  'Origin': 'https://johndtwaldron.github.io',
                  'Referer': 'https://johndtwaldron.github.io/ChatLaLiLuLeLo/'
                },
                timeout: 10000
              };
              
              const req = protocol.request(url + '/health', options, (res) => {
                let data = '';
                res.on('data', chunk => data += chunk);
                res.on('end', () => {
                  if (res.statusCode === 200) {
                    try {
                      const parsed = JSON.parse(data);
                      resolve({ success: true, data: parsed, status: res.statusCode });
                    } catch (e) {
                      resolve({ success: false, error: 'Invalid JSON response', status: res.statusCode });
                    }
                  } else {
                    resolve({ success: false, error: `HTTP ${res.statusCode}`, status: res.statusCode });
                  }
                });
              });
              
              req.on('error', (error) => {
                resolve({ success: false, error: error.message });
              });
              
              req.on('timeout', () => {
                req.destroy();
                resolve({ success: false, error: 'Request timeout' });
              });
              
              req.end();
            });
          }
          
          // Test API URLs in order of preference (same logic as api.ts)
          const apiUrls = [
            process.env.DEMO_API_URL || '${{ vars.DEMO_API_URL }}',
            'https://chatlalilulelo-backend-prod.chatlalilulelo.workers.dev'
          ].filter(url => url && url !== 'undefined' && url !== '${{ vars.DEMO_API_URL }}');
          
          console.log('üîç Testing API connectivity from deployed site perspective...');
          
          for (const apiUrl of apiUrls) {
            console.log(`\nTesting: ${apiUrl}`);
            const result = await testApiEndpoint(apiUrl);
            
            if (result.success) {
              console.log('‚úÖ API health check successful');
              console.log('Response:', JSON.stringify(result.data, null, 2));
              
              // Test CORS specifically
              console.log('Testing CORS from GitHub Pages origin...');
              // CORS test would be done here, but we can't fully simulate browser CORS from Node.js
              console.log('‚úÖ API is accessible - CORS should work from browser');
              
              process.exit(0); // Success!
            } else {
              console.log(`‚ùå API connectivity failed: ${result.error}`);
              if (result.status) {
                console.log(`HTTP Status: ${result.status}`);
              }
            }
          }
          
          console.log('‚ùå All API endpoints failed - deployed app will show connection errors');
          process.exit(1);
          EOF
          
          node test_deployed_api.js

      - name: üìä Generate deployment report
        if: always()
        run: |
          echo "üìä Generating deployment validation report..."
          
          cat > deployment_report.md << 'EOF'
          # ChatLaLiLuLeLo Deployment Validation Report
          
          **Deployment URL**: https://johndtwaldron.github.io/ChatLaLiLuLeLo/  
          **Timestamp**: $(date -u +"%Y-%m-%dT%H:%M:%SZ")  
          **Branch**: ${{ github.ref_name }}  
          **Commit**: ${{ github.sha }}
          
          ## Validation Results
          
          - üîç **Site Accessibility**: $([ -f deployed_page.html ] && echo '‚úÖ PASS' || echo '‚ùå FAIL')
          - üîß **Environment Config**: $([ -f deployed_env.js ] && echo '‚úÖ PASS' || echo '‚ùå FAIL')
          - üì° **API Connectivity**: $(echo 'See above for detailed results')
          
          ## Next Steps
          
          If any validations failed:
          1. Check repository variables: `DEMO_API_URL` should point to working Cloudflare Worker
          2. Verify backend deployment: https://chatlalilulelo-backend-prod.chatlalilulelo.workers.dev/health
          3. Test CORS configuration from GitHub Pages origin
          4. Check build artifacts for missing assets
          
          EOF
          
          echo "Deployment report generated:"
          cat deployment_report.md
          
          # Upload as artifact for debugging
          echo "deployment_report.md" > artifact_files.txt
          [ -f deployed_page.html ] && echo "deployed_page.html" >> artifact_files.txt
          [ -f deployed_env.js ] && echo "deployed_env.js" >> artifact_files.txt

      - name: üì§ Save build failure logs
        uses: actions/upload-artifact@v4
        if: failure() && needs.build.result == 'failure'
        with:
          name: pages-build-failure-logs
          path: |
            apps/mobile/npm-debug.log*
            apps/mobile/.npm/_logs/*.log
            apps/mobile/dist/
            health_check.json
            cors_check.txt
            lightning_validation.js
            security_validation.js
          retention-days: 14
          if-no-files-found: ignore

      - name: üìä Generate comprehensive failure report
        if: failure()
        run: |
          echo "üìä GitHub Pages Deployment Failure Report" > pages-failure-report.md
          echo "Timestamp: $(date -u)" >> pages-failure-report.md
          echo "Branch: ${{ github.ref_name }}" >> pages-failure-report.md
          echo "Commit: ${{ github.sha }}" >> pages-failure-report.md
          echo "" >> pages-failure-report.md
          
          echo "## Build Job Status" >> pages-failure-report.md
          echo "Build Job Result: ${{ needs.build.result }}" >> pages-failure-report.md
          echo "" >> pages-failure-report.md
          
          echo "## Environment Info" >> pages-failure-report.md
          echo "Node Version: $(node --version)" >> pages-failure-report.md
          echo "NPM Version: $(npm --version)" >> pages-failure-report.md
          echo "" >> pages-failure-report.md
          
          echo "## API Configuration" >> pages-failure-report.md
          echo "DEMO_API_URL: ${{ vars.DEMO_API_URL }}" >> pages-failure-report.md
          echo "" >> pages-failure-report.md
          
          echo "## Network Connectivity" >> pages-failure-report.md
          if [ -f "health_check.json" ]; then
            echo "API Health Check Result:" >> pages-failure-report.md
            cat health_check.json >> pages-failure-report.md
          else
            echo "API Health Check: FAILED (no health_check.json)" >> pages-failure-report.md
          fi
          echo "" >> pages-failure-report.md
          
          if [ -f "cors_check.txt" ]; then
            echo "CORS Check Result: PASSED" >> pages-failure-report.md
          else
            echo "CORS Check Result: FAILED" >> pages-failure-report.md
          fi
          echo "" >> pages-failure-report.md
          
          echo "## Troubleshooting Steps" >> pages-failure-report.md
          echo "1. Check backend deployment: https://chatlalilulelo-backend-prod.chatlalilulelo.workers.dev/health" >> pages-failure-report.md
          echo "2. Verify repository variables: DEMO_API_URL in GitHub repository settings" >> pages-failure-report.md
          echo "3. Check CORS configuration in backend for GitHub Pages origin" >> pages-failure-report.md
          echo "4. Review build logs in artifacts for specific error details" >> pages-failure-report.md

      - name: üì° Upload deployment validation artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-validation-report
          path: |
            deployment_report.md
            deployed_page.html
            deployed_env.js
            test_deployed_api.js
            pages-failure-report.md
          retention-days: 7
          if-no-files-found: ignore
